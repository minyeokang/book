var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as Enquire from "enquire.js";
import * as React from "react";
import RowContext from "./rowContext";
import "./style/index.less";
const responsiveArray = ["lg", "md", "sm", "xs"];
const responsiveMap = {
    xs: "(max-width: 800px)",
    sm: "(min-width: 1000px)",
    md: "(min-width: 1300px)",
    lg: "(min-width: 1600px)",
};
/**
 * Row.
 */
export default class Row extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            screens: {},
        };
    }
    componentDidMount() {
        Object.keys(responsiveMap).forEach((screen) => {
            Enquire.register(responsiveMap[screen], {
                match: () => {
                    if (typeof this.props.gutter !== "object") {
                        return;
                    }
                    this.setState((prevState) => ({
                        screens: Object.assign({}, prevState.screens, { [screen]: true }),
                    }));
                },
                unmatch: () => {
                    if (typeof this.props.gutter !== "object") {
                        return;
                    }
                    this.setState((prevState) => ({
                        screens: Object.assign({}, prevState.screens, { [screen]: false }),
                    }));
                },
                // Keep a empty destory to avoid triggering unmatch when unregister
                destroy() {
                    return true;
                },
            });
        });
    }
    componentWillUnmount() {
        Object.keys(responsiveMap).map((screen) => Enquire.unregister(responsiveMap[screen]));
    }
    getGutter() {
        const { gutter } = this.props;
        if (typeof gutter === "object") {
            for (let i = 0; i < responsiveArray.length; i++) {
                const breakpoint = responsiveArray[i];
                if (this.state.screens[breakpoint] && gutter[breakpoint] !== undefined) {
                    return gutter[breakpoint];
                }
            }
        }
        return gutter;
    }
    renderChildren() {
        const _a = this.props, { children, gutter, style } = _a, otherProps = __rest(_a, ["children", "gutter", "style"]);
        const gutterValue = this.getGutter();
        const rowStyle = gutter > 0
            ? Object.assign({ marginLeft: gutterValue / -2, marginRight: gutterValue / -2 }, style) : style;
        return (React.createElement(RowContext.Provider, { value: gutterValue },
            React.createElement("div", Object.assign({ className: "zw-row" }, otherProps, { style: rowStyle }), children)));
    }
    render() {
        return this.renderChildren();
    }
}
Row.defaultProps = {
    gutter: 0,
};
export { RowContext };
